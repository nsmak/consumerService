// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package domain_test is a generated GoMock package.
package domain_test

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/nsmak/consumerService/consumer/models"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CreateConsumer mocks base method
func (m *MockDataStore) CreateConsumer(c models.Consumer) (models.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", c)
	ret0, _ := ret[0].(models.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumer indicates an expected call of CreateConsumer
func (mr *MockDataStoreMockRecorder) CreateConsumer(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockDataStore)(nil).CreateConsumer), c)
}

// ConsumerIsExist mocks base method
func (m *MockDataStore) ConsumerIsExist(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumerIsExist", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumerIsExist indicates an expected call of ConsumerIsExist
func (mr *MockDataStoreMockRecorder) ConsumerIsExist(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerIsExist", reflect.TypeOf((*MockDataStore)(nil).ConsumerIsExist), email)
}

// Consumer mocks base method
func (m *MockDataStore) Consumer(email string) (models.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", email)
	ret0, _ := ret[0].(models.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer
func (mr *MockDataStoreMockRecorder) Consumer(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockDataStore)(nil).Consumer), email)
}
